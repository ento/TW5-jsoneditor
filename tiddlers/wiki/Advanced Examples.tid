created: 20190329021857209
modified: 20190421191148160
tags: 
title: Advanced Examples

!! Advanced Json Editor Examples

!!! Schema Editor Mode

When creating a jsoneditor widget, setting the `mode` to `design` in the `options` object creates a [[Schema Editor]]. This turns on some features which make it easier to you to design a Schema 'on-the-fly' without editing json text by hand. The following tutorial takes you through creating a base schema from another json automatically, editing the new schema with a live preview, and then using it to edit a larger database of objects.

* First, open the [[Json/Example/StarShip]] tiddler. Click on the `Create Schema` button. A new schema tiddler opens and the ~StarShip tidlder has a `schema` field set to the new schema tiddler.
* Next, open the $reveal widget below to show the Schema Editor. This allows you to edit the schema using the UI instead of manually editing json text. Open the next $reveal widget to show the Preview Editor. This is the current state of an editor rendered with the schema you are designing in the Schema Editor.
* In the Schema Editor, find the `properties` object and click on the `Add/Remove` button. This opens a popup that allows you to add new properties. Type "captain" in the input field and click Add.
* Go to the new `captain` property and set it's type to `object`. This makes `captain` an object that can have properties of its own. Click the new `Add/Remove` button and add fields to store the captain's first and last name (`first` and `last` are fine). Set each of these new fields' `type` to `string`.
* Check the Preview Editor. You should now have new fields at the bottom of the preview editor to enter a captain's name.
* Go back to the Schema Editor, click on the cog-symbol button at the very top of the editor, next to the "object type" header. This displays special fields that are part of the Json Schema sytax. Click the box next to `title` to add a title field to your new schema. In the new `title` field, type "Starship" and press enter.
* Finally, go to [[Editing Complex Objects|Usage/Editing Complex Objects]] to use an editor that automatically points to the schema you just edited. This editor is set within a tiddler that has a $select dropdown that allow you to change the path that the target `json` attribute is set to. This allows you to change between objects held in a parent object or array. In this way, you can edit individual objects held in large parents (hundreds of objects+). At this time there are only 3 starships listed - add a captain to each.

<$reveal type="nomatch" state="$:/config/Advanced Examples!!schema" text="show">

<$button set="$:/config/Advanced Examples!!schema" setTo="show">Show Schema Editor</$button>

</$reveal>
<$reveal type="match" state="$:/config/Advanced Examples!!schema" text="show">

<$button set="$:/config/Advanced Examples!!schema" setTo="hide">Hide Schema Editor</$button>

{{Usage/Schema Editor}}

</$reveal>
<$reveal type="nomatch" state="$:/config/Advanced Examples!!preview" text="show">

<$button set="$:/config/Advanced Examples!!preview" setTo="show">Show Preview Editor</$button>

</$reveal>
<$reveal type="match" state="$:/config/Advanced Examples!!preview" text="show">

<$button set="$:/config/Advanced Examples!!preview" setTo="hide">Hide Preview Editor</$button>

{{Usage/Preview Editor}}

</$reveal>

!!! View Mode

When creating a jsoneditor widget, setting the `mode` to `view` in the `options` object creates a Json Editor where text-area inputs and text inputs of specific types^^1^^ are hidden. Then, the data contents held at the path for that editor are rendered into a new element placed just after the hidden input. This allows other TiddlyWiki content to be transcluded in place of these inputs. The $jsoneditor widget is fully integrated into the tiddlywiki widget-tree, so all content is automatically wikified and refreshed using the native tiddlywiki refresh mechanism. See ''Power Users: JsonUI'' below for an example of how this can be used.

//^^1^^"text","textarea", "tel", "url", "number", "email"//

<$reveal type="nomatch" state="$:/config/Advanced Examples!!view" text="show">

<$button set="$:/config/Advanced Examples!!view" setTo="show">Show View Mode Editor</$button>

</$reveal>
<$reveal type="match" state="$:/config/Advanced Examples!!view" text="show">

<$button set="$:/config/Advanced Examples!!view" setTo="hide">Hide View Mode Editor</$button>

{{Usage/View Mode}}

</$reveal>

Trancluded Content Example:
<$reveal type="nomatch" state="$:/config/Advanced Examples!!transclude" text="show">

<$button set="$:/config/Advanced Examples!!transclude" setTo="show">Show Transclude Editor</$button>

</$reveal>
<$reveal type="match" state="$:/config/Advanced Examples!!transclude" text="show">

<$button set="$:/config/Advanced Examples!!transclude" setTo="hide">Hide Transclude Editor</$button>

{{Usage/TranscludeEditor}}

Data: <$code text={{Json/Example/TranscludedData}}/>

</$reveal>

!!! Power Users: JsonUI

Now that $jsoneditor is fully integrated into tiddlywiki's refresh mechanism, you can use a Json-Schema definition, along with a Json-Data-Tiddler that holds wikitext, to render UI elements in tiddlywiki.

For an example of this, see the JsonUI tiddler.